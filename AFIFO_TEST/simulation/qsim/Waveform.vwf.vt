// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/24/2022 00:08:05"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AFIFO
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AFIFO_vlg_sample_tst(
	rclk,
	rinc,
	rst_n,
	wclk,
	wdata,
	winc,
	sampler_tx
);
input  rclk;
input  rinc;
input  rst_n;
input  wclk;
input [7:0] wdata;
input  winc;
output sampler_tx;

reg sample;
time current_time;
always @(rclk or rinc or rst_n or wclk or wdata or winc)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AFIFO_vlg_check_tst (
	rdata,
	rempty,
	wfull,
	sampler_rx
);
input [7:0] rdata;
input  rempty;
input  wfull;
input sampler_rx;

reg [7:0] rdata_expected;
reg  rempty_expected;
reg  wfull_expected;

reg [7:0] rdata_prev;
reg  rempty_prev;
reg  wfull_prev;

reg [7:0] rdata_expected_prev;
reg  rempty_expected_prev;
reg  wfull_expected_prev;

reg [7:0] last_rdata_exp;
reg  last_rempty_exp;
reg  last_wfull_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	rdata_prev = rdata;
	rempty_prev = rempty;
	wfull_prev = wfull;
end

// update expected /o prevs

always @(trigger)
begin
	rdata_expected_prev = rdata_expected;
	rempty_expected_prev = rempty_expected;
	wfull_expected_prev = wfull_expected;
end



// expected wfull
initial
begin
	wfull_expected = 1'bX;
end 

// expected rempty
initial
begin
	rempty_expected = 1'bX;
end 
// expected rdata[ 7 ]
initial
begin
	rdata_expected[7] = 1'bX;
end 
// expected rdata[ 6 ]
initial
begin
	rdata_expected[6] = 1'bX;
end 
// expected rdata[ 5 ]
initial
begin
	rdata_expected[5] = 1'bX;
end 
// expected rdata[ 4 ]
initial
begin
	rdata_expected[4] = 1'bX;
end 
// expected rdata[ 3 ]
initial
begin
	rdata_expected[3] = 1'bX;
end 
// expected rdata[ 2 ]
initial
begin
	rdata_expected[2] = 1'bX;
end 
// expected rdata[ 1 ]
initial
begin
	rdata_expected[1] = 1'bX;
end 
// expected rdata[ 0 ]
initial
begin
	rdata_expected[0] = 1'bX;
end 
// generate trigger
always @(rdata_expected or rdata or rempty_expected or rempty or wfull_expected or wfull)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected rdata = %b | expected rempty = %b | expected wfull = %b | ",rdata_expected_prev,rempty_expected_prev,wfull_expected_prev);
	$display("| real rdata = %b | real rempty = %b | real wfull = %b | ",rdata_prev,rempty_prev,wfull_prev);
`endif
	if (
		( rdata_expected_prev[0] !== 1'bx ) && ( rdata_prev[0] !== rdata_expected_prev[0] )
		&& ((rdata_expected_prev[0] !== last_rdata_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rdata_exp[0] = rdata_expected_prev[0];
	end
	if (
		( rdata_expected_prev[1] !== 1'bx ) && ( rdata_prev[1] !== rdata_expected_prev[1] )
		&& ((rdata_expected_prev[1] !== last_rdata_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rdata_exp[1] = rdata_expected_prev[1];
	end
	if (
		( rdata_expected_prev[2] !== 1'bx ) && ( rdata_prev[2] !== rdata_expected_prev[2] )
		&& ((rdata_expected_prev[2] !== last_rdata_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rdata_exp[2] = rdata_expected_prev[2];
	end
	if (
		( rdata_expected_prev[3] !== 1'bx ) && ( rdata_prev[3] !== rdata_expected_prev[3] )
		&& ((rdata_expected_prev[3] !== last_rdata_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rdata_exp[3] = rdata_expected_prev[3];
	end
	if (
		( rdata_expected_prev[4] !== 1'bx ) && ( rdata_prev[4] !== rdata_expected_prev[4] )
		&& ((rdata_expected_prev[4] !== last_rdata_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rdata_exp[4] = rdata_expected_prev[4];
	end
	if (
		( rdata_expected_prev[5] !== 1'bx ) && ( rdata_prev[5] !== rdata_expected_prev[5] )
		&& ((rdata_expected_prev[5] !== last_rdata_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rdata_exp[5] = rdata_expected_prev[5];
	end
	if (
		( rdata_expected_prev[6] !== 1'bx ) && ( rdata_prev[6] !== rdata_expected_prev[6] )
		&& ((rdata_expected_prev[6] !== last_rdata_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rdata_exp[6] = rdata_expected_prev[6];
	end
	if (
		( rdata_expected_prev[7] !== 1'bx ) && ( rdata_prev[7] !== rdata_expected_prev[7] )
		&& ((rdata_expected_prev[7] !== last_rdata_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rdata[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rdata_expected_prev);
		$display ("     Real value = %b", rdata_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_rdata_exp[7] = rdata_expected_prev[7];
	end
	if (
		( rempty_expected_prev !== 1'bx ) && ( rempty_prev !== rempty_expected_prev )
		&& ((rempty_expected_prev !== last_rempty_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port rempty :: @time = %t",  $realtime);
		$display ("     Expected value = %b", rempty_expected_prev);
		$display ("     Real value = %b", rempty_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_rempty_exp = rempty_expected_prev;
	end
	if (
		( wfull_expected_prev !== 1'bx ) && ( wfull_prev !== wfull_expected_prev )
		&& ((wfull_expected_prev !== last_wfull_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port wfull :: @time = %t",  $realtime);
		$display ("     Expected value = %b", wfull_expected_prev);
		$display ("     Real value = %b", wfull_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_wfull_exp = wfull_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AFIFO_vlg_vec_tst();
// constants                                           
// general purpose registers
reg rclk;
reg rinc;
reg rst_n;
reg wclk;
reg [7:0] wdata;
reg winc;
// wires                                               
wire [7:0] rdata;
wire rempty;
wire wfull;

wire sampler;                             

// assign statements (if any)                          
AFIFO i1 (
// port map - connection between master ports and signals/registers   
	.rclk(rclk),
	.rdata(rdata),
	.rempty(rempty),
	.rinc(rinc),
	.rst_n(rst_n),
	.wclk(wclk),
	.wdata(wdata),
	.wfull(wfull),
	.winc(winc)
);

// rst_n
initial
begin
	rst_n = 1'b1;
	rst_n = #10000 1'b0;
	rst_n = #10000 1'b1;
	rst_n = #280000 1'b0;
	rst_n = #20000 1'b1;
end 
// wdata[ 7 ]
initial
begin
	wdata[7] = 1'b1;
	wdata[7] = #20000 1'b0;
	wdata[7] = #60000 1'b1;
	wdata[7] = #40000 1'b0;
	wdata[7] = #20000 1'b1;
	wdata[7] = #100000 1'b0;
	wdata[7] = #20000 1'b1;
	wdata[7] = #60000 1'b0;
	wdata[7] = #20000 1'b1;
	wdata[7] = #60000 1'b0;
	wdata[7] = #40000 1'b1;
	wdata[7] = #40000 1'b0;
	wdata[7] = #20000 1'b1;
	wdata[7] = #40000 1'b0;
	wdata[7] = #40000 1'b1;
	wdata[7] = #80000 1'b0;
	wdata[7] = #60000 1'b1;
	wdata[7] = #20000 1'b0;
	wdata[7] = #40000 1'b1;
	wdata[7] = #40000 1'b0;
	wdata[7] = #20000 1'b1;
	wdata[7] = #60000 1'b0;
	wdata[7] = #60000 1'b1;
	wdata[7] = #20000 1'b0;
end 
// wdata[ 6 ]
initial
begin
	wdata[6] = 1'b1;
	wdata[6] = #80000 1'b0;
	wdata[6] = #20000 1'b1;
	wdata[6] = #40000 1'b0;
	wdata[6] = #20000 1'b1;
	wdata[6] = #40000 1'b0;
	wdata[6] = #20000 1'b1;
	wdata[6] = #40000 1'b0;
	wdata[6] = #40000 1'b1;
	wdata[6] = #20000 1'b0;
	wdata[6] = #40000 1'b1;
	wdata[6] = #60000 1'b0;
	wdata[6] = #60000 1'b1;
	wdata[6] = #20000 1'b0;
	wdata[6] = #20000 1'b1;
	wdata[6] = #20000 1'b0;
	wdata[6] = #100000 1'b1;
	wdata[6] = #120000 1'b0;
	wdata[6] = #20000 1'b1;
	wdata[6] = #20000 1'b0;
	wdata[6] = #20000 1'b1;
	wdata[6] = #20000 1'b0;
	wdata[6] = #20000 1'b1;
	wdata[6] = #20000 1'b0;
	wdata[6] = #80000 1'b1;
	wdata[6] = #20000 1'b0;
end 
// wdata[ 5 ]
initial
begin
	wdata[5] = 1'b1;
	wdata[5] = #20000 1'b0;
	wdata[5] = #40000 1'b1;
	wdata[5] = #60000 1'b0;
	wdata[5] = #20000 1'b1;
	wdata[5] = #20000 1'b0;
	wdata[5] = #40000 1'b1;
	wdata[5] = #20000 1'b0;
	wdata[5] = #40000 1'b1;
	wdata[5] = #60000 1'b0;
	wdata[5] = #20000 1'b1;
	wdata[5] = #20000 1'b0;
	wdata[5] = #60000 1'b1;
	wdata[5] = #40000 1'b0;
	wdata[5] = #60000 1'b1;
	wdata[5] = #40000 1'b0;
	wdata[5] = #60000 1'b1;
	wdata[5] = #20000 1'b0;
	wdata[5] = #60000 1'b1;
	wdata[5] = #20000 1'b0;
	wdata[5] = #20000 1'b1;
	wdata[5] = #20000 1'b0;
	wdata[5] = #20000 1'b1;
	wdata[5] = #40000 1'b0;
	wdata[5] = #40000 1'b1;
	wdata[5] = #40000 1'b0;
	wdata[5] = #60000 1'b1;
end 
// wdata[ 4 ]
initial
begin
	wdata[4] = 1'b0;
	wdata[4] = #20000 1'b1;
	wdata[4] = #80000 1'b0;
	wdata[4] = #20000 1'b1;
	wdata[4] = #20000 1'b0;
	wdata[4] = #60000 1'b1;
	wdata[4] = #20000 1'b0;
	wdata[4] = #80000 1'b1;
	wdata[4] = #20000 1'b0;
	wdata[4] = #60000 1'b1;
	wdata[4] = #20000 1'b0;
	wdata[4] = #100000 1'b1;
	wdata[4] = #40000 1'b0;
	wdata[4] = #20000 1'b1;
	wdata[4] = #40000 1'b0;
	wdata[4] = #20000 1'b1;
	wdata[4] = #60000 1'b0;
	wdata[4] = #20000 1'b1;
	wdata[4] = #20000 1'b0;
	wdata[4] = #20000 1'b1;
	wdata[4] = #60000 1'b0;
	wdata[4] = #60000 1'b1;
	wdata[4] = #20000 1'b0;
	wdata[4] = #20000 1'b1;
end 
// wdata[ 3 ]
initial
begin
	wdata[3] = 1'b1;
	wdata[3] = #60000 1'b0;
	wdata[3] = #20000 1'b1;
	wdata[3] = #20000 1'b0;
	wdata[3] = #20000 1'b1;
	wdata[3] = #40000 1'b0;
	wdata[3] = #160000 1'b1;
	wdata[3] = #60000 1'b0;
	wdata[3] = #40000 1'b1;
	wdata[3] = #20000 1'b0;
	wdata[3] = #20000 1'b1;
	wdata[3] = #20000 1'b0;
	wdata[3] = #40000 1'b1;
	wdata[3] = #20000 1'b0;
	wdata[3] = #20000 1'b1;
	wdata[3] = #40000 1'b0;
	wdata[3] = #60000 1'b1;
	wdata[3] = #20000 1'b0;
	wdata[3] = #20000 1'b1;
	wdata[3] = #20000 1'b0;
	wdata[3] = #40000 1'b1;
	wdata[3] = #40000 1'b0;
	wdata[3] = #20000 1'b1;
	wdata[3] = #40000 1'b0;
	wdata[3] = #60000 1'b1;
	wdata[3] = #40000 1'b0;
	wdata[3] = #20000 1'b1;
end 
// wdata[ 2 ]
initial
begin
	wdata[2] = 1'b1;
	wdata[2] = #20000 1'b0;
	wdata[2] = #40000 1'b1;
	wdata[2] = #40000 1'b0;
	wdata[2] = #20000 1'b1;
	wdata[2] = #20000 1'b0;
	wdata[2] = #20000 1'b1;
	wdata[2] = #20000 1'b0;
	wdata[2] = #40000 1'b1;
	wdata[2] = #20000 1'b0;
	wdata[2] = #40000 1'b1;
	wdata[2] = #20000 1'b0;
	wdata[2] = #40000 1'b1;
	wdata[2] = #40000 1'b0;
	wdata[2] = #20000 1'b1;
	wdata[2] = #20000 1'b0;
	wdata[2] = #100000 1'b1;
	wdata[2] = #60000 1'b0;
	wdata[2] = #20000 1'b1;
	wdata[2] = #20000 1'b0;
	wdata[2] = #20000 1'b1;
	wdata[2] = #60000 1'b0;
	wdata[2] = #100000 1'b1;
	wdata[2] = #20000 1'b0;
	wdata[2] = #40000 1'b1;
	wdata[2] = #20000 1'b0;
	wdata[2] = #60000 1'b1;
	wdata[2] = #40000 1'b0;
end 
// wdata[ 1 ]
initial
begin
	wdata[1] = 1'b0;
	wdata[1] = #40000 1'b1;
	wdata[1] = #40000 1'b0;
	wdata[1] = #40000 1'b1;
	wdata[1] = #20000 1'b0;
	wdata[1] = #40000 1'b1;
	wdata[1] = #40000 1'b0;
	wdata[1] = #40000 1'b1;
	wdata[1] = #20000 1'b0;
	wdata[1] = #20000 1'b1;
	wdata[1] = #40000 1'b0;
	wdata[1] = #40000 1'b1;
	wdata[1] = #40000 1'b0;
	wdata[1] = #40000 1'b1;
	wdata[1] = #40000 1'b0;
	wdata[1] = #60000 1'b1;
	wdata[1] = #40000 1'b0;
	wdata[1] = #40000 1'b1;
	wdata[1] = #20000 1'b0;
	wdata[1] = #100000 1'b1;
	wdata[1] = #80000 1'b0;
	wdata[1] = #40000 1'b1;
	wdata[1] = #20000 1'b0;
	wdata[1] = #20000 1'b1;
	wdata[1] = #20000 1'b0;
	wdata[1] = #40000 1'b1;
end 
// wdata[ 0 ]
initial
begin
	wdata[0] = 1'b0;
	wdata[0] = #80000 1'b1;
	wdata[0] = #60000 1'b0;
	wdata[0] = #20000 1'b1;
	wdata[0] = #40000 1'b0;
	wdata[0] = #60000 1'b1;
	wdata[0] = #40000 1'b0;
	wdata[0] = #20000 1'b1;
	wdata[0] = #20000 1'b0;
	wdata[0] = #40000 1'b1;
	wdata[0] = #40000 1'b0;
	wdata[0] = #20000 1'b1;
	wdata[0] = #20000 1'b0;
	wdata[0] = #20000 1'b1;
	wdata[0] = #20000 1'b0;
	wdata[0] = #40000 1'b1;
	wdata[0] = #100000 1'b0;
	wdata[0] = #20000 1'b1;
	wdata[0] = #80000 1'b0;
	wdata[0] = #80000 1'b1;
	wdata[0] = #20000 1'b0;
	wdata[0] = #60000 1'b1;
	wdata[0] = #20000 1'b0;
	wdata[0] = #40000 1'b1;
	wdata[0] = #20000 1'b0;
end 

// wclk
initial
begin
	wclk = 1'b0;
	wclk = #27000 1'b1;
	# 9000;
	repeat(53)
	begin
		wclk = 1'b0;
		wclk = #9000 1'b1;
		# 9000;
	end
	wclk = 1'b0;
	wclk = #9000 1'b1;
end 

// rclk
initial
begin
	rclk = 1'b0;
	rclk = #105000 1'b1;
	# 9000;
	repeat(49)
	begin
		rclk = 1'b0;
		rclk = #9000 1'b1;
		# 9000;
	end
	rclk = 1'b0;
end 

// winc
initial
begin
	winc = 1'b0;
	winc = #20000 1'b1;
end 

// rinc
initial
begin
	rinc = 1'b0;
	rinc = #100000 1'b1;
end 

AFIFO_vlg_sample_tst tb_sample (
	.rclk(rclk),
	.rinc(rinc),
	.rst_n(rst_n),
	.wclk(wclk),
	.wdata(wdata),
	.winc(winc),
	.sampler_tx(sampler)
);

AFIFO_vlg_check_tst tb_out(
	.rdata(rdata),
	.rempty(rempty),
	.wfull(wfull),
	.sampler_rx(sampler)
);
endmodule

